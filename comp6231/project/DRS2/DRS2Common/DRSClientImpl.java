package DRS2Common;
/*
 * The client implementation is generated by the ORB Studio.
 * 
 * COMP6231-Assignment2-CORBA
 * Author: YICHEN LI
 * Student ID: 6389635
 */
 
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.Properties;

import org.omg.CORBA.ShortHolder;
import org.omg.CORBA.StringHolder;
import org.omg.CORBA.ORBPackage.InvalidName;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.CosNaming.NamingContextPackage.CannotProceed;
import org.omg.CosNaming.NamingContextPackage.NotFound;

import common.SvrInfo;

import DRSApplicantion.DRS;
import DRSCommon.DRSClientCommon;
import DRSCommon.DRSCommonService;

public class DRSClientImpl {
	public DRSApplicantion.DRS []target = null;
	private org.omg.CORBA.ORB orb = null;

	/**
	 * Constructor for DRSClientImpl
	 * 
	 * @throws IOException
	 */
	public DRSClientImpl() throws IOException {
		target = new DRSApplicantion.DRS[3];
		initORB(null);
	}

	/**
	 * Constructor for DRSClientImpl
	 * 
	 * @throws IOException
	 * @see java.lang.Object#Object()
	 */
	public DRSClientImpl(String[] args) throws IOException {
		initORB(args);
	}

	/**
	 * Initialize ORB.
	 *  
	 * @param args
	 * @throws IOException
	 * @throws InvalidName 
	 * @throws org.omg.CosNaming.NamingContextPackage.InvalidName 
	 * @throws CannotProceed 
	 * @throws NotFound 
	 */
	public void initORB(String[] args) throws IOException {

		Properties props = System.getProperties();
		props.setProperty("org.omg.CORBA.ORBClass", "com.sun.corba.se.internal.POA.POAORB");
		props.setProperty("org.omg.CORBA.ORBSingletonClass", "com.sun.corba.se.internal.corba.ORBSingleton");

		// Initialize the ORB
		orb = org.omg.CORBA.ORB.init((String[])args, props);

		try {
			// ---- Uncomment below to enable Naming Service access. ----
//			org.omg.CORBA.Object ncobj = orb.resolve_initial_references("NameService");
//			NamingContextExt nc = NamingContextExtHelper.narrow(ncobj);
//			//org.omg.CORBA.Object obj = nc.resolve_str("MyServerObject");
//			org.omg.CORBA.Object obj1 = nc.resolve_str("Montreal");
//			LineNumberReader input = new LineNumberReader(new FileReader("Montreal.ior"));
//			String ior = input.readLine();
//			org.omg.CORBA.Object obj = orb.string_to_object(ior);
//			target[0] = DRSApplicantion.DRSHelper.narrow(obj);
			
////			org.omg.CORBA.Object obj2 = nc.resolve_str("Toronto");
//			input = new LineNumberReader(new FileReader("Toronto.ior"));
//			ior = input.readLine();
//			obj = orb.string_to_object(ior);
//			target[1] = DRSApplicantion.DRSHelper.narrow(obj);
//			
////			org.omg.CORBA.Object obj3 = nc.resolve_str("Vancouver");
//			input = new LineNumberReader(new FileReader("Vancouver.ior"));
//			ior = input.readLine();
//			obj = orb.string_to_object(ior);
//			target[2] = DRSApplicantion.DRSHelper.narrow(obj);
			/*
			LineNumberReader input = new LineNumberReader(new FileReader("server.ior"));
			String ior = input.readLine();
			System.out.println("ior:"+ior);
			org.omg.CORBA.Object obj = orb.string_to_object(ior);
			*/			
			setNames();
			
			}
			catch(Exception e)
			{
				System.out.println("error:"+e);
			}
		}
		
	
	/**
	 * Obtain ORB Interface.
	 * 
	 * @return
	 */
	public DRSApplicantion.DRS[] getORBInterface() {
		return target;
	}

	/**
	 * Shutdown ORB.
	 */
	public void shutdown() {
		orb.shutdown(true);
	}

	/**
	 * Test driver for DRSClientImpl.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		
		/**
		 * Buy Test
		 * 
		 */
		// Montreal
		Thread buyMTL1 = new Thread(new PurchaseClient("M00001", "0001" ,(short)50, 0));
		buyMTL1.start();
		
		Thread buyMTL2 = new Thread(new PurchaseClient("M00002", "0001" ,(short)60, 0));
		buyMTL2.start();
		
		
		// Toronto
		Thread buyTOR1 = new Thread(new PurchaseClient("T00001", "0001" ,(short)70, 1));
		buyTOR1.start();
		
		Thread buyTOR2 = new Thread(new PurchaseClient("T00002", "0002" ,(short)80, 1));
		buyTOR2.start();
		
		
		// Vancouver
		Thread buyVAN1 = new Thread(new PurchaseClient("V00001", "0001" ,(short)90, 2));
		buyVAN1.start();
		
		Thread buyVAN2 = new Thread(new PurchaseClient("V00002", "0002" ,(short)100, 2));
		buyVAN2.start();
		
		
		/**
		 * Return Test
		 * 
		 */
		// Montreal
		Thread retMTL1 = new Thread(new ReturnClient("M00001", "0001", (short)10, 0));
		retMTL1.start();
		
		
		Thread retMTL2 = new Thread(new ReturnClient("M00002", "0001", (short)20, 0));
		retMTL2.start();
		
		// Toronto
		Thread retTOR1 = new Thread(new ReturnClient("T00001", "0001", (short)30, 1));
		retTOR1.start();
		
		// Vancouver
		Thread retVAN1 = new Thread(new ReturnClient("V00001", "0001", (short)40, 2));
		retVAN1.start();
//		
		/**
		 * Check Stock Test
		 * 
		 */
		// Montreal
		try {
			DRSClientImpl test3 = new DRSClientImpl();
			
			org.omg.CORBA.StringHolder storename = new org.omg.CORBA.StringHolder();
     		org.omg.CORBA.ShortHolder numberOfItem = new org.omg.CORBA.ShortHolder();
     		
     		// Montreal
     		System.out.print(test3.getORBInterface()[0].checkStock("0001", storename, numberOfItem));
     		
     		// Toronto
     		System.out.print(test3.getORBInterface()[1].checkStock("0002", storename, numberOfItem));
     		
     		// Vancouver
     		System.out.print(test3.getORBInterface()[2].checkStock("0003", storename, numberOfItem));
			
			
		} catch (Exception e) {
			// TODO: handle exception
			e.getStackTrace();
		}
		
		/**
		 * 
		 * exchange commodities test
		 * 
		 */
		
		// Montreal
		new Thread(new ExchangeClient("M00001", "0001", (short)10, "0002", (short)20, 0)).start();
		// Toronto
		new Thread(new ExchangeClient("T00001", "0001", (short)10, "0002", (short)20, 1)).start();
		// Vanvouver
		new Thread(new ExchangeClient("V00001", "0001", (short)10, "0002", (short)20, 2)).start();
//		try {
//			// DRSClientImpl test = new DRSClientImpl();
//
//			// test.getORBInterface().operation1("A message in the bottle...");
//
////			org.omg.CORBA.StringHolder storename = new org.omg.CORBA.StringHolder();
////			org.omg.CORBA.ShortHolder numberOfItem = new org.omg.CORBA.ShortHolder();
////
////			
////			// Montreal
////			System.out.println(test.getORBInterface()[0].buy("M00001", "0001", (short)50));
////			System.out.println(test.getORBInterface()[0]._return("M00001", "0001", (short)10));
////			System.out.print(test.getORBInterface()[0].checkStock("0001", storename, numberOfItem));
////			System.out.println(test.getORBInterface()[0].exchange("M00001", "0001", (short)40, "0002", (short)50));
////			
////			// Toronto
////			System.out.println(test.getORBInterface()[1].buy("T00001", "0001", (short)100));
////			System.out.println(test.getORBInterface()[1]._return("T00001", "0001", (short)10));
////			System.out.print(test.getORBInterface()[1].checkStock("0001", storename, numberOfItem));
////			System.out.println(test.getORBInterface()[1].exchange("T00001", "0001", (short)90, "0003", (short)10));
////			
////			
////			// Vancouver
////			System.out.println(test.getORBInterface()[2].buy("V00001", "0001", (short)70));
////			System.out.println(test.getORBInterface()[2]._return("V00001", "0001", (short)10));
////			System.out.print(test.getORBInterface()[2].checkStock("0001", storename, numberOfItem));
////			System.out.println(test.getORBInterface()[2].exchange("V00001", "0001", (short)60, "0005", (short)40));
//
//
//			
//			
////			test.shutdown();
//		}
//		catch(IOException ex) {
//			ex.printStackTrace();
//		}
	}
	
	
	public DRSCommonService[] tgt = new DRSCommonService[3];
	private void setNames() {
		try {
			tgt[0] = (new DRSClientCommon(SvrInfo.SVR2_NAME_MONTREAL).getORBInterface());
			tgt[1] = (new DRSClientCommon(SvrInfo.SVR2_NAME_TORONTO).getORBInterface());
			tgt[2] = (new DRSClientCommon(SvrInfo.SVR2_NAME_VANCOUVER).getORBInterface());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
}


// buy
class PurchaseClient implements Runnable
{

	private String customerID;
	private String itemID;
	private short numberOfItem;
	private int index;
	
	public PurchaseClient(String customerID, String itemID, short numberOfItem, int index)
	{
	  this.customerID = customerID;
	  this.itemID = itemID;
	  this.numberOfItem = numberOfItem;
	  this.index = index;
		
	}
	
	
	@Override
	public void run() {
		
		DRSClientImpl test1;
		try {
			
			Thread.sleep(4000);
			test1 = new DRSClientImpl();
			String buyInfor = test1.getORBInterface()[index].buy(customerID, itemID, numberOfItem);
			System.out.println(buyInfor);
			test1.shutdown();
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		
		
		
	}
	
}


// _return
class ReturnClient implements Runnable
{

	private String customerID;
	private String itemID;
	private short numberOfItem;
	private int index;
	
	public ReturnClient(String customerID, String itemID, short numberOfItem, int index)
	{
		this.customerID = customerID;
		this.itemID = itemID;
		this.numberOfItem = numberOfItem;
		this.index = index;
	}
	
	@Override
	public void run() {
		DRSClientImpl test2;
		
		try {
			Thread.sleep(6000);
			test2 = new DRSClientImpl();
			String returnInfor = test2.getORBInterface()[index]._return(customerID, itemID, numberOfItem);
			System.out.println(returnInfor);
			test2.shutdown();
			
		} catch (Exception e) {
			// TODO: handle exception
			e.getStackTrace();
		}
		
	}
		
}


// exchange
class ExchangeClient implements Runnable
{
    private String customerID;
    private String boughtItemID;
    private short boughtNumber;
    private String desiredItemID;
    private short desiredNumber;
    private int index;
	
    public ExchangeClient(String cusID, String boughtItemID, short boughtNum, String desIID, short desiredNum, int index)
    {
    	this.customerID = cusID;
    	this.boughtItemID = boughtItemID;
    	this.boughtNumber = boughtNum;
    	this.desiredItemID = desIID;
    	this.desiredNumber = desiredNum;
    	this.index = index;
    	
    }
    
	@Override
	public void run() {
		
		DRSClientImpl test4;
		
		try {
			Thread.sleep(8000);
			test4 = new DRSClientImpl();
			String exchangeInfor = test4.getORBInterface()[index].exchange(customerID, boughtItemID, boughtNumber, desiredItemID, desiredNumber);
			System.out.println(exchangeInfor);
			test4.shutdown();
		} catch (Exception e) {
			// TODO: handle exception
			e.getStackTrace();
		}
		
	}
	

}

/*
// check stock
class CheckStockClient implements Runnable
{
    private String itemID;
    private int index;
    org.omg.CORBA.StringHolder storename = new org.omg.CORBA.StringHolder();
    org.omg.CORBA.ShortHolder numberOfItem = new org.omg.CORBA.ShortHolder();
   
    public CheckStockClient(String ItemID, StringHolder storename, ShortHolder numberOfItem, int index)
    {
    	this.itemID = itemID;
    	this.storename = storename;
    	this.numberOfItem = numberOfItem;
    	this.index = index;
    }
	
	@Override
	public void run() {
       DRSClientImpl test3;
      
       try {
    	   test3 = new DRSClientImpl();
    	   String checkStockInfor = test3.getORBInterface()[index].checkStock(itemID, storename, numberOfItem);
    	   System.out.println(checkStockInfor);
    	   test3.shutdown();
		
	} catch (Exception e) {
		// TODO: handle exception
		e.getStackTrace();
	}
		
	}
	
}
*/