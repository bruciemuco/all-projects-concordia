package ca.com.Concordia.distributed.Ass_2.DRS_Client;
/*
 * The client implementation is generated by the ORB Studio.
 */
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.Properties;

import java.util.Scanner;

import org.omg.CORBA.ORBPackage.InvalidName;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.CosNaming.NamingContextPackage.CannotProceed;
import org.omg.CosNaming.NamingContextPackage.NotFound;

import DRSApplicantion.DRS;
import DRSCommon.DRSClientCommon;
import DRSCommon.DRSCommonService;

import common.SvrInfo;


public class MyServiceClientImpl {
	private ca.com.Concordia.distributed.Ass_2.MyServer.MyService target = null;
	private DRSCommonService tgt;
	private org.omg.CORBA.ORB orb = null;

	/**
	 * Constructor for MyServiceClientImpl
	 * 
	 * @throws IOException
	 */
	public MyServiceClientImpl() throws IOException {
		initORB(null);
	}

	public MyServiceClientImpl(String name) throws IOException {
		initORB1(name);
	}

	/**
	 * Constructor for MyServiceClientImpl
	 * 
	 * @throws IOException
	 * @see java.lang.Object#Object()
	 */
	public MyServiceClientImpl(String[] args) throws IOException {
		initORB(args);
	}

	/**
	 * Initialize ORB.
	 *  
	 * @param args
	 * @throws IOException
	 */
	public void initORB(String[] args) throws IOException {

		Properties props = System.getProperties();
		props.setProperty("org.omg.CORBA.ORBClass", "com.sun.corba.se.internal.POA.POAORB");
		props.setProperty("org.omg.CORBA.ORBSingletonClass", "com.sun.corba.se.internal.corba.ORBSingleton");

		// Initialize the ORB
		orb = org.omg.CORBA.ORB.init((String[])args, props);

		// ---- Uncomment below to enable Naming Service access. ----
		// org.omg.CORBA.Object ncobj = orb.resolve_initial_references("NameService");
		// NamingContextExt nc = NamingContextExtHelper.narrow(ncobj);
		// org.omg.CORBA.Object obj = nc.resolve_str("MyServerObject");

		LineNumberReader input = new LineNumberReader(new FileReader("server.ior"));
		String ior = input.readLine();
		org.omg.CORBA.Object obj = orb.string_to_object(ior);

		target = ca.com.Concordia.distributed.Ass_2.MyServer.MyServiceHelper.narrow(obj);
		
	}
	
	public void initORB1(String name) throws IOException {
		try {
			tgt = (new DRSClientCommon(name).getORBInterface());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	/**
	 * Obtain ORB Interface.
	 * 
	 * @return
	 */
	public ca.com.Concordia.distributed.Ass_2.MyServer.MyService getORBInterface() {
		return target;
	}

	public DRSCommonService getORBInterface(int i) {
		return tgt;
	}

	/**
	 * Shutdown ORB.
	 */
	public void shutdown() {
		orb.shutdown(true);
	}

	/**
	 * Test driver for MyServiceClientImpl.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			System.out.println("What do you want to do?");
			System.out.println("1. Make a purchase");
			System.out.println("2. Return the items");
			System.out.println("3. Check available items");
			System.out.println("4. Exchange items");
			System.out.println("5. finish");
			
			
			Scanner scan = new Scanner(System.in);
			int choice = scan.nextInt();

			if (choice == 1) {
				System.out.println("Input the customerID:");
				String itemId = scan.next();
				String[] name = {itemId.substring(0,3) + "Server"};
				MyServiceClientImpl server = new MyServiceClientImpl(name);
				if (server.getORBInterface().haveThisItem(itemId)) {
					System.out.println("Input your itemID:");
					int customerID = scan.nextInt();
					System.out.println("How many items you want to purchase?");
					int number = scan.nextInt();
					String purchase =server.getORBInterface().purchase(customerID, itemId, number);
					System.out.println(purchase);
				} else {
					System.out.println("We don't have this item!");
				}
				server.shutdown();
			}
			if (choice == 2) {
				System.out.println("Input the customerID:");
				String itemID = scan.next();
				String[] name={itemID.substring(0,3) + "Server"};
				MyServiceClientImpl server = new MyServiceClientImpl(name);
				if (server.getORBInterface().haveThisItem(itemID)) {
					System.out.println("Input your itemID:");
					int customerID = scan.nextInt();
					System.out.println("How many items you want to return?");
					int number = scan.nextInt();
					String giveback = server.getORBInterface().giveback(customerID, itemID, number);
					System.out.println(giveback);
				} else {
					System.out.println("We don't have this item!");
				}
				server.shutdown();
			}
			if (choice == 3) {
				System.out.println("Input the customerId");
				String itemId = scan.next();
				String[] name={itemId.substring(0,3) + "Server"};
				MyServiceClientImpl server = new MyServiceClientImpl(name);
				if (server.getORBInterface().haveThisItem(itemId)) {
					int availability = server.getORBInterface().checkStock(itemId);
					System.out.println("Availability: " + availability);
				} else {
					System.out.println("We don't have this item!");
				}
				server.shutdown();
			}
			if (choice == 4)
			{
				System.out.println("Input the customerId you have the items");
				String itemID1 = scan.next();
				System.out.println("Input the customerId you want to change to");
				String itemID2 = scan.next();
				System.out.println("How many items you want to exchange?");
				int number = scan.nextInt();
				System.out.println("Input your itemID:");
				int customerID = scan.nextInt();
				String[] name = {itemID1.substring(0,3) + "Server"};
				MyServiceClientImpl server = new MyServiceClientImpl(name);
				System.out.println(server.getORBInterface().exChange(itemID1, itemID2, customerID, number));
				server.shutdown();
			}
			if(choice == 5)
				return;
		}
		catch(IOException ex) {
			ex.printStackTrace();
		}
	}
}
